name: Build and Push Docker Image

on:
  push:
    branches: [main]

  pull_request:
    branches: [main]

jobs:
  build_docker:
    runs-on: ubuntu-latest
    #important to read and write packages on ghcr
    permissions:
        contents: read
        packages: write
    steps:
      # Step 1: Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 3: Log in to GitHub Container Registry (GHCR)
      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          #replace harcoding username as i'm using same account
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}

      # Step 4: Build the Docker image
      - name: Build Docker Image
        id: build
        run: |
          docker build --no-cache -t ghcr.io/${{ secrets.GHCR_USERNAME }}/stock-exchange:pipeline ./exchange-rate
        continue-on-error: false

      # Step 5: Push the Docker image if build was successful
      - name: Push Docker Image
        if: success()
        run: |
          docker push ghcr.io/${{ secrets.GHCR_USERNAME }}/stock-exchange:pipeline
        continue-on-error: false

      # Step 6: Tag the image with 'latest' after successful push
      - name: Tag Docker Image
        if: success()
        run: |
          docker tag ghcr.io/${{ secrets.GHCR_USERNAME }}/stock-exchange:pipeline ghcr.io/${{ secrets.GHCR_USERNAME }}/stock-exchange:latest
          docker push ghcr.io/${{ secrets.GHCR_USERNAME }}/stock-exchange:latest

      # Step 7: fallback control if the build or push fails
      - name: Send Notification on Failure
        if: failure()
        run: |
          echo "Build failed. Please check the logs."


  terraform_ecs:
    name: 'Terraform'
    runs-on: ubuntu-latest
    timeout-minutes: 40
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version : 1.9.6

    # check installed version
    - name: Terraform version
      run: terraform --version
      
    - name: Terraform init
      run: terraform init
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TF_ACTION_WORKING_DIR: '.'
        AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Terraform Validate
      run: terraform validate

    # Generates an execution plan for Terraform
    # - name: Terraform destroy
    #   run: terraform destroy -auto-approve
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #     TF_ACTION_WORKING_DIR: '.'
    #     AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        
    # - name: wait 2 minutes for refresh
    #   run: sleep 120
      
    # Generates an execution plan for Terraform
    - name: Terraform plan
      run: terraform plan
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TF_ACTION_WORKING_DIR: '.'
        AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    # apply changes
    - name: Terraform apply
      run: terraform apply -auto-approve
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TF_ACTION_WORKING_DIR: '.'
        AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}