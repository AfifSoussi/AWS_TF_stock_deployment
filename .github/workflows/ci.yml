name: Build and Deploy with Blue-Green Strategy

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    # Run every hour
    - cron: '0 * * * *'

jobs:
  python_lint_test:
    name: 'Python Lint and Tests'
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      # Step 3: Install dependencies (if you have a requirements.txt)
      - name: Install Dependencies
        run: |
          pip install -r ./exchange-rate/requirements.txt
          pip install flake8 black pytest

      # Step 4: Lint check with Flake8
      - name: Lint with Flake8
        run: flake8 ./exchange-rate

      # Step 5: Code formatting check with Black
      - name: Code Formatting with Black
        run: black --check ./exchange-rate

  build_docker:
    runs-on: ubuntu-latest
    needs: python_lint_test
    permissions:
      contents: read
      packages: write
    steps:
      # Step 1: Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 3: Log in to GitHub Container Registry (GHCR)
      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}

      # Step 4: Build the Docker image with version tag
      - name: Build Docker Image
        id: build
        run: |
          IMAGE_TAG=$(git rev-parse --short HEAD)
          docker build --no-cache -t ghcr.io/${{ secrets.GHCR_USERNAME }}/stock-exchange:$IMAGE_TAG ./exchange-rate
          echo "::set-output name=image::$IMAGE_TAG"

      # Step 5: Push the Docker image if build was successful
      - name: Push Docker Image
        if: success()
        run: |
          IMAGE_TAG=$(git rev-parse --short HEAD)
          docker push ghcr.io/${{ secrets.GHCR_USERNAME }}/stock-exchange:$IMAGE_TAG

  ecs_terraform:
    name: 'Terraform Deploy'
    runs-on: ubuntu-latest
    needs: build_docker
    environment: production
    timeout-minutes: 40
    defaults:
      run:
        shell: bash
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout Code
        uses: actions/checkout@v3

      # Install the latest version of Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.9.6

      # Initialize Terraform
      - name: Terraform init
        run: terraform init
        env:
          AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # Validate Terraform configuration
      - name: Terraform Validate
        run: terraform validate

      # Check Terraform format
      - name: Terraform Format Check
        run: terraform fmt -check

      # Plan Terraform changes
      - name: Terraform plan
        run: terraform plan
        env:
          AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # Apply the changes to deploy the Green environment
      - name: Terraform apply
        run: |
          IMAGE_TAG=$(git rev-parse --short HEAD)
          terraform apply -var="image_tag=$IMAGE_TAG" -auto-approve
        env:
          AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  get_alb_arns:
    name: 'Get ALB and Target Group ARN'
    runs-on: ubuntu-latest
    needs: ecs_terraform
    steps:
      # Fetch Terraform outputs for ALB and target group ARNs
      - name: Get Blue and Green Target Group ARNs
        id: alb_outputs
        run: |
          BLUE_TG_ARN=$(terraform output -raw Blue-Target-Group-ARN)
          GREEN_TG_ARN=$(terraform output -raw Green-Target-Group-ARN)
          ALB_LISTENER_ARN=$(terraform output -raw ALB-Listener-ARN)
          echo "::set-output name=blue_tg::$BLUE_TG_ARN"
          echo "::set-output name=green_tg::$GREEN_TG_ARN"
          echo "::set-output name=alb_listener::$ALB_LISTENER_ARN"

  test_green:
    name: 'Test Green Environment'
    runs-on: ubuntu-latest
    needs: get_alb_arns
    steps:
      # Simple health check to verify Green environment
      - name: Health Check for Green Environment
        run: |
          GREEN_URL=$(aws elbv2 describe-target-health --target-group-arn ${{ needs.get_alb_arns.outputs.green_tg }} --query 'TargetHealthDescriptions[0].TargetHealth.State' --output text)
          echo "Health check result: $GREEN_URL"
          if [ "$GREEN_URL" != "healthy" ]; then exit 1; fi

  promote_green:
    name: 'Promote Green to Blue (Production)'
    runs-on: ubuntu-latest
    needs: test_green
    steps:
      # Promote Green to Blue by switching ALB traffic to Green target group
      - name: Promote Green to Blue
        run: |
          echo "Switching traffic from Blue to Green..."
          aws elbv2 modify-listener --listener-arn ${{ needs.get_alb_arns.outputs.alb_listener }} --default-actions Type=forward,TargetGroupArn=${{ needs.get_alb_arns.outputs.green_tg }}

  rollback:
    name: 'Rollback to Blue'
    runs-on: ubuntu-latest
    needs: test_green
    if: failure()
    steps:
      # Rollback to Blue by switching ALB traffic back to Blue target group
      - name: Rollback to Blue
        run: |
          echo "Tests failed, rolling back to Blue..."
          aws elbv2 modify-listener --listener-arn ${{ needs.get_alb_arns.outputs.alb_listener }} --default-actions Type=forward,TargetGroupArn=${{ needs.get_alb_arns.outputs.blue_tg }}
