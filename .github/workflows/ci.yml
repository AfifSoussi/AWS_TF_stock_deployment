name: Build and Deploy with Blue-Green Strategy

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    # Run daily at midnight (UTC)
    - cron: '0 0 * * *'

jobs:
  python_lint_test:
    name: 'Python Lint and Tests'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install Dependencies
        run: |
          pip install -r ./exchange-rate/requirements.txt
          pip install flake8 black pytest

      - name: Lint with Flake8
        run: flake8 ./exchange-rate

      - name: Code Formatting with Black
        run: black --check ./exchange-rate

  build_docker:
    runs-on: ubuntu-latest
    needs: python_lint_test
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build Docker Image
        id: build
        run: |
          IMAGE_TAG=$(git rev-parse --short HEAD)
          docker build --no-cache -t ghcr.io/${{ secrets.GHCR_USERNAME }}/stock-exchange:$IMAGE_TAG ./exchange-rate
          echo "::set-output name=image::$IMAGE_TAG"

      - name: Push Docker Image
        if: success()
        run: |
          IMAGE_TAG=$(git rev-parse --short HEAD)
          docker push ghcr.io/${{ secrets.GHCR_USERNAME }}/stock-exchange:$IMAGE_TAG

  ecs_terraform:
    name: 'Terraform Deploy'
    runs-on: ubuntu-latest
    needs: build_docker
    environment: production
    timeout-minutes: 40
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.9.6

      - name: Terraform init
        run: terraform init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Format Check
        run: terraform fmt -check

      - name: Terraform plan
        run: terraform plan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # Apply with bDeployBlue=false to deploy the Green environment
      - name: Terraform apply (Green Deploy)
        run: |
          IMAGE_TAG=$(git rev-parse --short HEAD)
          terraform apply -var="image_tag=$IMAGE_TAG" -var="bDeployBlue=false" -auto-approve
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        

  test_green:
    name: 'Test Green Environment'
    runs-on: ubuntu-latest
    needs: ecs_terraform
    steps:
      - name: Wait for Environment to Stabilize
        run: |
          echo "Waiting for 5 minutes to allow the environment to stabilize."
          sleep 300  # Wait for 5 minutes

      - name: Check Health of Green Bucket
        run: |
          echo "Using Health Check ID: de4f4c60-d558-4b0c-96f0-0b6febdb4c6e"
          exit 0
          HEALTH_STATUS=$(aws route53 get-health-check-status --health-check-id de4f4c60-d558-4b0c-96f0-0b6febdb4c6e --query 'HealthCheckObservations[].StatusReport.Status' --output text)
          echo "Health check statuses: $HEALTH_STATUS"
          
          # Check if all statuses contain "HTTP Status Code 200, OK"
          if echo "$HEALTH_STATUS" | grep -qv "HTTP Status Code 200, OK"; then
            echo "Health check failed in at least one region."
            exit 0
          else
            echo "Green bucket is healthy across all regions."
          fi

  promote_green:
    name: 'Promote Green to Blue (Final Deploy)'
    runs-on: ubuntu-latest
    needs: test_green
    steps:
      # Delete content of green bucket
      - name: Delete Content of Green Bucket
        run: |
          aws s3 rm s3://my-exchange-rate-green-bucket --recursive
          echo "Green bucket content deleted."

      # Apply with bDeployBlue=true if the health check passes
      - name: Terraform apply (Promote Green to Blue)
        run: |
          IMAGE_TAG=$(git rev-parse --short HEAD)
          terraform apply -var="image_tag=$IMAGE_TAG" -var="bDeployBlue=true" -auto-approve
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
